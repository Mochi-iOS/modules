#! /usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const extra_typings_1 = require("@commander-js/extra-typings");
const package_json_1 = require("../package.json");
const consola_1 = __importDefault(require("consola"));
const init_1 = require("./commands/init");
const check_1 = __importDefault(require("./commands/check"));
const bundle_1 = __importDefault(require("./commands/bundle"));
const serve_1 = __importDefault(require("./commands/serve"));
const program = new extra_typings_1.Command();
program.name('mochi-cli').version(package_json_1.version).description(package_json_1.description);
const initCmd = program.command('init').description('initalize a new repo or module from template');
initCmd
    .command('module')
    .requiredOption('--name <NAME>', 'name of the module')
    .option('--dir <DIR>', 'repository path', '.')
    .action((options) => (0, init_1.handleInitModule)(options.dir, options.name).catch(writeErrorToConsola));
initCmd
    .command('repo')
    .requiredOption('--name <NAME>', 'name of the module')
    .requiredOption('--author <Author>', 'author of the repo')
    .option('--dir <DIR>', 'repository path', '.')
    .action((options) => (0, init_1.handleInitRepo)(options.dir, options.name, options.author).catch(writeErrorToConsola));
program
    .command('check')
    .description('checks for errors in repository')
    .option('--dir <DIR>', 'repository path', '.')
    .action((options) => (0, check_1.default)(options.dir).catch(writeErrorToConsola));
program
    .command('bundle')
    .description('bundles modules into a repository')
    .option('--dir <DIR>', 'repository path', '.')
    .option('--out <OUT>', 'path to store the bundle', './dist')
    .option('-s, --site', 'generate static site', false)
    .action((options) => (0, bundle_1.default)(options.dir, options.out, options.site).catch(writeErrorToConsola));
program
    .command('serve')
    .description('bundle and start local server for testing modules')
    .option('--dir <DIR>', 'repository path', '.')
    .option('--out <OUT>', 'path to store the bundle', './dist')
    .option('--port <PORT>', 'the server port', '10443')
    .option('-s, --site', 'generate static site', false)
    .option('-w, --watch', 'watch repository changes and rebuild', false)
    .action((options) => (0, serve_1.default)(options.dir, options.out, options.site, options.watch, options.port).catch(writeErrorToConsola));
program.parse(process.argv);
function writeErrorToConsola(error) {
    consola_1.default.error(error);
}
