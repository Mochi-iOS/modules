"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const consola_1 = require("consola");
const esbuild_1 = __importDefault(require("esbuild"));
const path_1 = __importDefault(require("path"));
const utils_1 = require("../utils");
const node_os_1 = __importDefault(require("node:os"));
async function handleServe(dir, dest, site, watch, preferredPort) {
    var _a;
    dir = path_1.default.resolve(process.cwd(), dir);
    dest = path_1.default.resolve(process.cwd(), dest);
    const options = await (0, utils_1.buildOptions)(dir, { outdir: dest, site: site, serve: true });
    const ctx = await esbuild_1.default.context(options);
    if (watch) {
        consola_1.consola.log('');
        consola_1.consola.start('Observing directory for changes...');
        await ctx.watch();
    }
    const { host, port } = await ctx.serve({
        port: parseInt(preferredPort),
        servedir: dest,
        onRequest: (args) => {
            consola_1.consola.info(`received a ${args.method} request for ${args.path}.`);
        },
    });
    consola_1.consola.log('');
    consola_1.consola.success(`Started local server at http://${host}:${port}, lan: http://${(_a = retrieveLocalIP()) !== null && _a !== void 0 ? _a : host}:${port}`);
}
exports.default = handleServe;
const retrieveLocalIP = () => {
    const ifaces = node_os_1.default.networkInterfaces();
    for (const key in ifaces) {
        const iface = ifaces[key];
        for (const net of iface !== null && iface !== void 0 ? iface : []) {
            if (net.family == 'IPv4' && !net.internal) {
                return net.address;
            }
        }
    }
    return undefined;
};
